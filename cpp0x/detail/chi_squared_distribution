#ifndef DETAIL_CHI_SQUARED_DISTRIBUTION
#define DETAIL_CHI_SQUARED_DISTRIBUTION

// ======================================================================
//
// chi_squared_distribution: per C++11 26.5.8.5.2 [rand.dist.norm.chi_squared]
//
// Produce random numbers x, 0 < x
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/gamma_distribution"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stats"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <sstream>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class chi_squared_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>          &
                , chi_squared_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits>    &
                , chi_squared_distribution<Real> &
                );

}

// ======================================================================

template< class Real >
  class std::chi_squared_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::chi_squared_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            chi_squared_distribution( );
  explicit  chi_squared_distribution( Real );
  explicit  chi_squared_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  Real         n    ( ) const  { return parm.n(); }
  param_type   param( ) const  { return parm; }
  void         param( param_type const & p )  { parm = p; }
  result_type  min  ( ) const  { return numeric_limits<Real>::min(); }
  result_type  max  ( ) const  { return numeric_limits<Real>::infinity(); }

  // equality comparisons:
  bool  operator == ( chi_squared_distribution const & ) const;
  bool  operator != ( chi_squared_distribution const & ) const;

};  // chi_squared_distribution<>

// ======================================================================

template< class Real >
  class std::chi_squared_distribution<Real>::param_t
{
  friend  class chi_squared_distribution<Real>;

private:
  Real  n_;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error bad_n;

public:

  // types:
  typedef  Real                            result_type;
  typedef  chi_squared_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = Real(1.0) );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  result_type  n( ) const  { return n_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

  // statistics:
  _::stats  expected( ) const;

};  // chi_squared_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::chi_squared_distribution<Real>::param_t::
  param_t( Real n )
: n_( Real() < n ? n : throw bad_n )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::chi_squared_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return n_ == other.n_;
}

template< class Real >
bool
  std::chi_squared_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// statistics:

template< class Real >
std::_::stats
  std::chi_squared_distribution<Real>::param_t::
  expected( ) const
{
  typedef  long double  ldbl;
  ldbl const  n        = n_
           ,  mean     = n
           ,  variance = 2.0L * n
           ,  skew     = sqrt(8.0L / n)
           ,  kurtosis = 12.0L / n;
  return _::stats(mean, variance, skew, kurtosis);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::chi_squared_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  constexpr Real  two(2.0);
  gamma_distribution<Real>  gamma_d(n_/two, two);
  return gamma_d(u);
}

template< class Real >
std::range_error
  std::chi_squared_distribution<Real>::param_t::
  bad_n("std::chi_squared_distribution<> requires 0 < n");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::chi_squared_distribution<Real>::
  chi_squared_distribution( )
: parm( )
{ }

template< class Real >
  std::chi_squared_distribution<Real>::
  chi_squared_distribution( Real n )
: parm( n )
{ }

template< class Real >
  std::chi_squared_distribution<Real>::
  chi_squared_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::chi_squared_distribution<Real>::
  reset( )
{
}

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::chi_squared_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::chi_squared_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::chi_squared_distribution<Real>::
  operator == ( chi_squared_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::chi_squared_distribution<Real>::
  operator != ( chi_squared_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>          & os
                   , chi_squared_distribution<Real> const & d
                   )
{
  _::stream_state_guard<charT,traits> g(os);

  return os << d.n();
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits>    & is
                   , chi_squared_distribution<Real> & d
                   )
{
  typedef  chi_squared_distribution<Real>  dist_t;
  typedef  typename dist_t::result_type    result_t;
  typedef  typename dist_t::param_type     param_t;

  _::stream_state_guard<charT,traits> g(is);

  result_t  n;
  is >> n;
  if( ! is.fail() )
    d.param( param_t(n) );

  return is;
}

// ======================================================================

#endif  // DETAIL_CHI_SQUARED_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
