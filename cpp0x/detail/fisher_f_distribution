#ifndef DETAIL_FISHER_F_DISTRIBUTION
#define DETAIL_FISHER_F_DISTRIBUTION

// ======================================================================
//
// fisher_f_distribution: per C++11 26.5.8.5.5 [rand.dist.norm.f]
//
// Produce random numbers x, 0 <= x
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/chi_squared_distribution"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <sstream>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class fisher_f_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>       &
                , fisher_f_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits> &
                , fisher_f_distribution<Real> &
                );

}

// ======================================================================

template< class Real >
  class std::fisher_f_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::fisher_f_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            fisher_f_distribution( );
  explicit  fisher_f_distribution( Real );
            fisher_f_distribution( Real, Real );
  explicit  fisher_f_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  Real         m    ( ) const  { return parm.m(); }
  Real         n    ( ) const  { return parm.n(); }
  param_type   param( ) const  { return parm; }
  void         param( param_type const & p )  { parm = p; }
  result_type  min  ( ) const  { return Real(); }
  result_type  max  ( ) const  { return numeric_limits<Real>::infinity(); }

  // equality comparisons:
  bool  operator == ( fisher_f_distribution const & ) const;
  bool  operator != ( fisher_f_distribution const & ) const;

};  // fisher_f_distribution<>

// ======================================================================

template< class Real >
  class std::fisher_f_distribution<Real>::param_t
{
  friend  class fisher_f_distribution<Real>;

  typedef  typename  conditional< sizeof(Real) < sizeof(double)
                                , double
                                , Real
                                >::type
           work_t;

private:
  Real   m_;
  Real   n_;
  work_t n_over_m_;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;

  // helper functions:
  static range_error bad_m;
  static range_error bad_n;

public:

  // types:
  typedef  Real                         result_type;
  typedef  fisher_f_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = Real(1.0), Real = Real(1.0) );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  Real  m( ) const  { return m_; }
  Real  n( ) const  { return n_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

};  // fisher_f_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::fisher_f_distribution<Real>::param_t::
  param_t( Real m, Real n )
: m_       ( Real() < m ? m : throw bad_m )
, n_       ( Real() < n ? n : throw bad_n )
, n_over_m_( work_t(n_) / work_t(n_) )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::fisher_f_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return m_ == other.m_
      && n_ == other.n_;
}

template< class Real >
bool
  std::fisher_f_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::fisher_f_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  chi_squared_distribution<work_t> chisq_d1(m);
  chi_squared_distribution<work_t> chisq_d2(n);
  return  n_over_m_ * chisq_d1(u)
                    / chisq_d2(u);
}

template< class Real >
std::range_error
  std::fisher_f_distribution<Real>::param_t::
  bad_m("std::fisher_f_distribution<> requires 0 < m");

template< class Real >
std::range_error
  std::fisher_f_distribution<Real>::param_t::
  bad_n("std::fisher_f_distribution<> requires 0 < n");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::fisher_f_distribution<Real>::
  fisher_f_distribution( )
: parm( )
{ }

template< class Real >
  std::fisher_f_distribution<Real>::
  fisher_f_distribution( Real m )
: parm( m )
{ }

template< class Real >
  std::fisher_f_distribution<Real>::
  fisher_f_distribution( Real m, Real n )
: parm( m, n )
{ }

template< class Real >
  std::fisher_f_distribution<Real>::
  fisher_f_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::fisher_f_distribution<Real>::
  reset( )
{ }

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::fisher_f_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::fisher_f_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::fisher_f_distribution<Real>::
  operator == ( fisher_f_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::fisher_f_distribution<Real>::
  operator != ( fisher_f_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>       & os
                   , fisher_f_distribution<Real> const & d
                   )
{
  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  return os << d.m() << sp << d.n();
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits> & is
                   , fisher_f_distribution<Real> & d
                   )
{
  typedef  fisher_f_distribution<Real>   dist_t;
  typedef  typename dist_t::result_type  result_t;
  typedef  typename dist_t::param_type   param_t;

  _::stream_state_guard<charT,traits> g(is);

  result_t  m, n;
  is >> m >> n;
  if( ! is.fail() )
    d.param( param_t(m, n) );

  return is;
}

// ======================================================================

#endif  // DETAIL_FISHER_F_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
