#ifndef DETAIL_NORMAL_DISTRIBUTION
#define DETAIL_NORMAL_DISTRIBUTION

// ======================================================================
//
// normal_distribution: per C++11 26.5.8.5.1 [rand.dist.norm.normal]
//
// Produce random numbers x, -inf <= x <= inf
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stats"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <sstream>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class normal_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>     &
                , normal_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits> &
                , normal_distribution<Real>   &
                );

}

// ======================================================================

template< class Real >
  class std::normal_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::normal_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            normal_distribution( );
  explicit  normal_distribution( Real );
            normal_distribution( Real, Real );
  explicit  normal_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  Real         mean  ( ) const  { return parm.mean(); }
  Real         stddev( ) const  { return parm.stddev(); }
  param_type   param ( ) const  { return parm; }
  void         param ( param_type const & );
  result_type  min   ( ) const  { return -numeric_limits<Real>::infinity(); }
  result_type  max   ( ) const  { return  numeric_limits<Real>::infinity(); }

  // equality comparisons:
  bool  operator == ( normal_distribution const & ) const;
  bool  operator != ( normal_distribution const & ) const;

};  // normal_distribution<>

// ======================================================================

template< class Real >
  class std::normal_distribution<Real>::param_t
{
  friend  class normal_distribution<Real>;

private:
  Real  mean_;
  Real  stddev_;

  mutable bool  have_next_value_;
  mutable Real  next_value_;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error bad_stddev;

public:

  // types:
  typedef  Real                       result_type;
  typedef  normal_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = Real(), Real = Real(1.0) );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  Real  mean  ( ) const  { return mean_; }
  Real  stddev( ) const  { return stddev_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

  // statistics:
  _::stats  expected( ) const;

  // i/o functions:
  template< class R, class charT, class traits >
  friend  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>  &
                , normal_distribution<R> const &
                );
  template< class R, class charT, class traits >
  friend  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits> &
                , normal_distribution<R>      &
                );

};  // normal_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::normal_distribution<Real>::param_t::
  param_t( Real mean, Real stddev )
: mean_           ( mean )
, stddev_         ( Real() < stddev ? stddev : throw bad_stddev )
, have_next_value_( false )
, next_value_     ( Real() )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::normal_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return mean_            == other.mean_
      && stddev_          == other.stddev_
      && have_next_value_ == other.have_next_value_
      && (!have_next_value_ || next_value_ == other.next_value_);
}

template< class Real >
bool
  std::normal_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// statistics:

template< class Real >
std::_::stats
  std::normal_distribution<Real>::param_t::
  expected( ) const
{
  typedef  long double  ldbl;
  ldbl const  mean     = mean_
           ,  variance = stddev_ * stddev_
           ,  skew     = 0.0L
           ,  kurtosis = 0.0L;
  return _::stats(mean, variance, skew, kurtosis);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::normal_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  if( have_next_value_ )
    return have_next_value_ = false
         , next_value_;

  constexpr size_t  nbits = numeric_limits<Real>::digits;

  Real const  u1                = generate_canonical<Real,nbits>(u)
           ,  u2                = generate_canonical<Real,nbits>(u)
           ,  sqrt_neg2_log_u1  = sqrt( -2.0 * log(u1) )
           ,  twopi_u2          = Real(6.2831853071795862) * u2;

  return have_next_value_ = true
       , next_value_ = mean_ + stddev_ * sqrt_neg2_log_u1 * cos(twopi_u2)
       ,               mean_ + stddev_ * sqrt_neg2_log_u1 * sin(twopi_u2);

}

template< class Real >
std::range_error
  std::normal_distribution<Real>::param_t::
  bad_stddev("std::normal_distribution<> requires 0 < stddev");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::normal_distribution<Real>::
  normal_distribution( )
: parm( )
{ }

template< class Real >
  std::normal_distribution<Real>::
  normal_distribution( Real mean )
: parm( mean )
{ }

template< class Real >
  std::normal_distribution<Real>::
  normal_distribution( Real mean, Real stddev )
: parm( mean, stddev )
{ }

template< class Real >
  std::normal_distribution<Real>::
  normal_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::normal_distribution<Real>::
  reset( )
{
  parm.have_next_value_ = false;
}

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::normal_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::normal_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// property functions:

template< class Real >
void
  std::normal_distribution<Real>::
  param( param_type const & p )
{
  parm = p;
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::normal_distribution<Real>::
  operator == ( normal_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::normal_distribution<Real>::
  operator != ( normal_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>     & os
                   , normal_distribution<Real> const & d
                   )
{
  typedef  normal_distribution<Real>    dist_t;
  typedef  typename dist_t::param_type  param_t;

  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  param_t const &  parm = d.param();

  return os << parm.mean_ << sp << parm.stddev_
            << sp << int(parm.have_next_value_)
            << sp << (parm.have_next_value_ ? parm.next_value_ : Real() )
            ;
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits> & is
                   , normal_distribution<Real>   & d
                   )
{
  typedef  normal_distribution<Real>     dist_t;
  typedef  typename dist_t::result_type  result_t;
  typedef  typename dist_t::param_type   param_t;

  _::stream_state_guard<charT,traits> g(is);

  result_t  mean, stddev, next;
  int have;
  is >> mean >> stddev >> have >> next;
  if( ! is.fail() )  {
    param_t parm(mean, stddev);
    parm.have_next_value_ = have;
    parm.next_value_ = next;
    d.param(parm);
  }

  return is;
}

// ======================================================================

#endif  // DETAIL_NORMAL_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
