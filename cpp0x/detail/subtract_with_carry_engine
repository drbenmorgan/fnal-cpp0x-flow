#ifndef DETAIL_SUBTRACT_WITH_CARRY_ENGINE
#define DETAIL_SUBTRACT_WITH_CARRY_ENGINE

// ======================================================================
//
// subtract_with_carry_engine:  per C++11 26.5.3.3 [rand.eng.sub]
//
// ======================================================================

#include "cpp0x/algorithm"
#include "cpp0x/cstddef"
#include "cpp0x/cstdint"
#include "cpp0x/detail/is_sseq"
#include "cpp0x/detail/linear_congruential_engine"
#include "cpp0x/detail/pow2"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <stdexcept>

// ======================================================================

namespace std {

  template< class UInt, size_t w, size_t s, size_t r >
    class subtract_with_carry_engine;

  template< class UInt, size_t w, size_t s, size_t r
          , class charT, class traits
          >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>                  &
                , subtract_with_carry_engine<UInt,w,s,r> const &
                );

  template< class UInt, size_t w, size_t s, size_t r
          , class charT, class traits
          >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits>            &
                , subtract_with_carry_engine<UInt,w,s,r> &
                );

}

// ======================================================================

template< class UInt, size_t w, size_t s, size_t r >
  class std::subtract_with_carry_engine
{
  // useful constants:
  static  constexpr UInt
    _zero_   = 0u
  , _one_    = 1u
  , _digits_ = numeric_limits<UInt>::digits
  , _min_    = _zero_
  , _max_    = _::pow2m1<UInt,w>::value
  ;

  // validate parameters:
  STATIC_ASSERT( is_unsigned<UInt>::value
               , "std::subtract_with_carry_engine<> requires an unsigned type"
               );
  STATIC_ASSERT( 0 < s && s < r
               , "std::subtract_with_carry_engine<> requires 0 < s < r"
               );
  STATIC_ASSERT( 0 < w && w <= _digits_
               , "std::subtract_with_carry_engine<> requires 0 < w <= std::numeric_limits<UInt>::digits"
               );
  STATIC_ASSERT( _min_ < _max_
               , "std::subtract_with_carry_engine<> requires min < max"
               );

private:
  UInt    X[r];
  UInt    c;
  size_t  i;

  // helper functions:
  void
    cycle( );
  UInt
    x( size_t i ) const  { return X[i % r]; }
  UInt &
    x( size_t i )        { return X[i % r]; }

public:

  // types:
  typedef  UInt  result_type;

  // engine characteristics:
  static  constexpr size_t       word_size    = w;
  static  constexpr size_t       short_lag    = s;
  static  constexpr size_t       long_lag     = r;
  static  constexpr result_type  min          = _min_;
  static  constexpr result_type  max          = _max_;
  static  constexpr result_type  default_seed = 19780503u;

  // constructors and seeding functions:
  explicit
    subtract_with_carry_engine( result_type = default_seed );
  template< class Sseq >
  explicit
    subtract_with_carry_engine( Sseq &
                              , typename
                                enable_if< _::is_sseq< Sseq
                                                     , subtract_with_carry_engine
                                                     >::value
                                         >::type * = nullptr
                              );
  void
    seed( result_type = default_seed );
  template< class Sseq >
  typename enable_if< _::is_sseq< Sseq
                                , subtract_with_carry_engine
                                >::value
                    >::type
    seed( Sseq & );

  // use compiler-generated d'tor

  // copy functions:
    subtract_with_carry_engine( subtract_with_carry_engine const & );
  subtract_with_carry_engine &
    operator = ( subtract_with_carry_engine const & );

  // generating functions:
  result_type
    operator () ( );
  void
    discard( unsigned long long );

  // equality comparisons:
  bool
    operator == ( subtract_with_carry_engine const & ) const;
  bool
    operator != ( subtract_with_carry_engine const & ) const;

  // i/o:
  template< class U, size_t W, size_t S, size_t R, class charT, class traits >
  friend basic_ostream<charT, traits> &
    operator << ( basic_ostream<charT, traits>              &
                , subtract_with_carry_engine<U,W,S,R> const &
                );
  template< class U, size_t W, size_t S, size_t R, class charT, class traits >
  friend basic_istream<charT, traits> &
    operator >> ( basic_istream<charT, traits>        &
                , subtract_with_carry_engine<U,W,S,R> &
                );

};  // subtract_with_carry_engine<>

// ----------------------------------------------------------------------
// constructors and seeding functions:

template< class UInt, size_t w, size_t s, size_t r >
  std::subtract_with_carry_engine<UInt,w,s,r>::
  subtract_with_carry_engine( result_type value )
{
  seed(value);
}

template< class UInt, size_t w, size_t s, size_t r >
template< class Sseq >
  std::subtract_with_carry_engine<UInt,w,s,r>::
  subtract_with_carry_engine( Sseq & q
                            , typename
                              enable_if< _::is_sseq< Sseq
                                                   , subtract_with_carry_engine
                                                   >::value
                                       >::type *
                            )
{
  seed(q);
}

template< class UInt, size_t w, size_t s, size_t r >
void
  std::subtract_with_carry_engine<UInt,w,s,r>::
  seed( result_type value )
{
  static  constexpr size_t  n = (w + 31u) / 32u;

  if( value == _zero_ )
    value = default_seed;
  linear_congruential_engine<UInt,40014u,0u,2147483563u> e(value);

  for( size_t nbits = i = 0u; i != r; ++i, nbits = 0u )  {
    UInt & S = X[i];
    S = e();
    switch( n ) {
      default:  throw range_error("subtract_with_carry_engine<>: word size > 128 bits!");
      case 4u:  S |= e() << (nbits += 32u);
      case 3u:  S |= e() << (nbits += 32u);
      case 2u:  S |= e() << (nbits += 32u);
      case 1u:  S &= _max_;
    }
  }
  c = UInt(X[r-1u] == _zero_);
}

template< class UInt, size_t w, size_t s, size_t r >
template< class Sseq >
typename std::enable_if< std::_::is_sseq< Sseq
                                        , std::subtract_with_carry_engine<UInt,w,s,r>
                                        >::value
                       >::type
  std::subtract_with_carry_engine<UInt,w,s,r>::
  seed( Sseq & q )
{
  static  constexpr size_t  k = (w + 31u) / 32u;
  UInt arr[r*k];  q.generate(arr + 0, arr + r*k);

  for( size_t nbits = i = 0u
            , j = k * i; i != r; ++i, nbits = 0u, ++j )  {
    UInt & S = X[i];
    S = arr[j];
    switch( k ) {
      default:  throw "subtract_with_carry_engine<>: word size > 128 bits!";
      case 4u:  S |= arr[++j] << (nbits += 32u);
      case 3u:  S |= arr[++j] << (nbits += 32u);
      case 2u:  S |= arr[++j] << (nbits += 32u);
      case 1u:  S &= _max_;
    }
  }
  c = UInt(X[r-1u] == _zero_);
}

// ---------------------------------------------------------------------
// copy functions:

template< class UInt, size_t w, size_t s, size_t r >
  std::subtract_with_carry_engine<UInt,w,s,r>::
  subtract_with_carry_engine( subtract_with_carry_engine const & other )
: c( other.c )
, i( other.i )
{
  uninitialized_copy( other.X+0, other.X+r
                    , X+0
                    );
}

template< class UInt, size_t w, size_t s, size_t r >
std::subtract_with_carry_engine<UInt,w,s,r> &
  std::subtract_with_carry_engine<UInt,w,s,r>::
  operator = ( subtract_with_carry_engine const & other )
{
  copy( other.X+0, other.X+r
      , X+0
      );
  c = other.c;
  i = other.i;
  return *this;
}

// ----------------------------------------------------------------------
// generating functions:

template< class UInt, size_t w, size_t s, size_t r >
UInt
  std::subtract_with_carry_engine<UInt,w,s,r>::
  operator () ( )
{
  if( ++i >= r )
    cycle(), i = 0u;
  return X[i];
}

template< class UInt, size_t w, size_t s, size_t r >
void
  std::subtract_with_carry_engine<UInt,w,s,r>::
  discard( unsigned long long z )
{
  for(  ; z != 0uLL; --z )
    (*this)( );
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class UInt, size_t w, size_t s, size_t r >
bool
  std::subtract_with_carry_engine<UInt,w,s,r>::
  operator == ( subtract_with_carry_engine const & other ) const
{
  for( size_t k = 0u; k != r; ++k )
    if( x(i+k) != other.x(other.i+k) )
      return false;
  return c == other.c;
}

template< class UInt, size_t w, size_t s, size_t r >
bool
  std::subtract_with_carry_engine<UInt,w,s,r>::
  operator != ( subtract_with_carry_engine const & other ) const
{
  return ! (*this == other );
}

// ----------------------------------------------------------------------
// i/o:

template< class UInt, size_t w, size_t s, size_t r, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>                  & os
                   , subtract_with_carry_engine<UInt,w,s,r> const & e
                   )
{
  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  for( size_t k = 0u; k != r; ++k )
    os << e.x(e.i+k) << sp;
  return os << e.c;
}

template< class UInt, size_t w, size_t s, size_t r, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits>            & is
                   , subtract_with_carry_engine<UInt,w,s,r> & e
                   )
{
  _::stream_state_guard<charT,traits> g(is);

  UInt arr[r+1];
  copy_n(istream_iterator<UInt>(is), r+1, arr+0);
  if( ! is.fail() )
    copy(arr+0, arr+r, e.X+0), e.c = arr[r], e.i = 0u;

  return is;
}

// ----------------------------------------------------------------------
// helper functions:

template< class UInt, size_t w, size_t s, size_t r >
void
  std::subtract_with_carry_engine<UInt,w,s,r>::
  cycle()
{
  for( size_t k = 0, q = r - s; k != r; ++k, ++q )  {
    UInt const & Xq = x(q);
    UInt       & Xk = X[k];
    UInt const   nc = c  == _zero_  ?  UInt(Xq < Xk)
                    : Xq == _zero_  ?  c
                                    :  UInt(Xq <= Xk);
    Xk = (Xq - Xk - c) & _max_;
    c  = nc;
  }
}

// ======================================================================

#endif  // DETAIL_SUBTRACT_WITH_CARRY_ENGINE

// vi: set filetype=cpp:expandtab:shiftwidth=2:
