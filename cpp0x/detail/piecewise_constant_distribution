#ifndef DETAIL_PIECEWISE_CONSTANT_DISTRIBUTION
#define DETAIL_PIECEWISE_CONSTANT_DISTRIBUTION

// ======================================================================
//
// piecewise_constant_distribution: per C++11 26.5.8.6.2 [rand.dist.samp.pconst]
//
// Produce random numbers x, b0 <= x < bn
//
// ======================================================================

#include "cpp0x/algorithm"
#include "cpp0x/cmath"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/iterator"
#include "cpp0x/numeric"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <stdexcept>
#include <vector>

namespace std {

  template< class Real = double >
    class piecewise_constant_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>                 &
                , piecewise_constant_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits>            &
                , piecewise_constant_distribution<Real>  &
                );

}

// ======================================================================

template< class Real >
  class std::piecewise_constant_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::piecewise_constant_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            piecewise_constant_distribution( );
  template< class InIterB, class InIterW >
            piecewise_constant_distribution( InIterB, InIterB, InIterW );
  template< class UnaryOp >
            piecewise_constant_distribution( size_t, Real, Real, UnaryOp );
  explicit  piecewise_constant_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  vector<Real>  intervals( ) const  { return parm.intervals(); }
  vector<Real>  densities( ) const  { return parm.densities(); }
  param_type    param    ( ) const  { return parm; }
  void          param    ( param_type const & p )  { parm = p; }
  result_type   min      ( ) const  { return intervals().front(); }
  result_type   max      ( ) const  { return intervals().back(); }

  // equality comparisons:
  bool  operator == ( piecewise_constant_distribution const & ) const;
  bool  operator != ( piecewise_constant_distribution const & ) const;

};  // piecewise_constant_distribution<>

// ======================================================================

template< class Real >
  class std::piecewise_constant_distribution<Real>::param_t
{
  friend  class piecewise_constant_distribution<Real>;

private:

  vector<Real>  b_;  // interval boundaries             0 .. n_
  vector<Real>  d_;  // probabilities a.k.a. densities  0 .. n_-1
  vector<Real>  c_;  // cumulative probabilities        0 .. n_
  size_t        n_;

  // helper functions:
  void  validate_and_normalize( );
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error  need_ordered_boundaries;
  static range_error  need_nonNaN_weights;
  static range_error  need_nonInf_weights;
  static range_error  need_a_nonzero_weight;
  static range_error  need_positive_weights;

public:

  // types:
  typedef  Real                                   result_type;
  typedef  piecewise_constant_distribution<Real>  distribution_type;

  // constructors:
    param_t( );
  template< class InIterB, class InIterW >
    param_t( InIterB, InIterB, InIterW );
  template< class UnaryOp >
    param_t( size_t, Real, Real, UnaryOp );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  vector<Real>  intervals( ) const  { return b_; }
  vector<Real>  densities( ) const  { return d_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

};  // piecewise_constant_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::piecewise_constant_distribution<Real>::param_t::
  param_t( )
: b_( 2, 0.0 )  // interval boundaries             [ 0 .. n_ ]
, d_( 1, 1.0 )  // probabilities a.k.a. densities  [ 0 .. n_ )
, c_( )         // cumulative probabilities        [ 0 .. n_ ]
, n_( b_.size()-1 )
{
  b_[1] = 1.0;

  validate_and_normalize();
}

template< class Real >
template< class InIterB, class InIterW >
  std::piecewise_constant_distribution<Real>::param_t::
  param_t( InIterB b, InIterB e, InIterW w )
: b_( b, e )  // interval boundaries             [ 0 .. n_ ]
, d_( )       // probabilities a.k.a. densities  [ 0 .. n_ )
, c_( )       // cumulative probabilities        [ 0 .. n_ ]
, n_( b_.size()-1 )
{
  d_.reserve(n_);

  if( n_ < 2u )  {
    b_[0] = 0.0;  b_[1] = 1.0;
    d_.assign(1, 1.0);
    n_ = 1u;
  }
  else {
    if( ! is_sorted(b_.begin(), b_.end()) )
      throw need_ordered_boundaries;
    copy_n(w, n_, back_inserter(d_));
  }

  validate_and_normalize();
}

template< class Real >
template< class UnaryOp >
  std::piecewise_constant_distribution<Real>::param_t::
  param_t( size_t nw, Real xmin, Real xmax, UnaryOp fw )
: b_( )  // interval boundaries             [ 0 .. n_ ]
, d_( )  // probabilities a.k.a. densities  [ 0 .. n_ )
, c_( )  // cumulative probabilities        [ 0 .. n_ ]
, n_( min(1u, nw) )
{
  b_.reserve(n_+1u);
  d_.reserve(n_);

  Real const delta = (xmax - xmin) / nw;
  Real const half = delta / Real(2.0);
  if( delta <= Real() )
      throw need_ordered_boundaries;

  for( size_t k = 0u; k != n_; ++k )  {
    Real x = xmin + k * delta;
    b_.push_back(x);
    d_.push_back( fw(x + half) );
  }
  b_.push_back(xmax);

  validate_and_normalize();
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::piecewise_constant_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return b_ == other.b_
      && d_ == other.d_;
}

template< class Real >
bool
  std::piecewise_constant_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
std::range_error
  std::piecewise_constant_distribution<Real>::param_t::
  need_ordered_boundaries("std::piecewise_constant_distribution<> requires boundaries be in increasing order");

template< class Real >
std::range_error
  std::piecewise_constant_distribution<Real>::param_t::
  need_nonNaN_weights("std::piecewise_constant_distribution<> requires weights be non-NaN");

template< class Real >
std::range_error
  std::piecewise_constant_distribution<Real>::param_t::
  need_nonInf_weights("std::piecewise_constant_distribution<> requires weights be non-infinite");

template< class Real >
std::range_error
  std::piecewise_constant_distribution<Real>::param_t::
  need_a_nonzero_weight("std::piecewise_constant_distribution<> requires at least 1 weight > 0");

template< class Real >
std::range_error
  std::piecewise_constant_distribution<Real>::param_t::
  need_positive_weights("std::piecewise_constant_distribution<> requires weights be non-negative");

template< class Real >
void
  std::piecewise_constant_distribution<Real>::param_t::
  validate_and_normalize( )
{
  // b_ ... interval boundaries            [ 0 .. n_ ]
  // d_ ... probabilities a.k.a. densities [ 0 .. n_ )
  // c_ ... cumulative probabilities       [ 0 .. n_ ]

  typedef  typename vector<Real>::iterator  iter_t;
  iter_t const d_begin = d_.begin()
             , d_end   = d_.end();

  Real S = accumulate(d_begin, d_end, 0.0);
  if     ( isnan(S) )  throw need_nonNaN_weights;
  else if( isinf(S) )  throw need_nonInf_weights;
  else if( S == 0.0 )  throw need_a_nonzero_weight;

  // normalize:
  for( iter_t b = d_begin; b != d_end; ++b )  {
    if( *b >= 0.0 )  *b /= S;
    else             throw need_positive_weights;
  }

  // prepare cumulative probabilities:
  c_.reserve(n_+1u);
  c_.push_back(Real());
  partial_sum(d_begin, d_end, back_inserter(c_));

  // finish preparing probabilities:
  for( size_t k = 0; k != n_; ++k )
    d_[k] /= (b_[k+1] - b_[k]);
}

template< class Real >
template< class URNG >
Real
  std::piecewise_constant_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  // b_ ... interval boundaries            [ 0 .. n_ ]
  // d_ ... probabilities a.k.a. densities [ 0 .. n_ )
  // c_ ... cumulative probabilities       [ 0 .. n_ ]

  constexpr size_t  nbits = numeric_limits<Real>::digits;
  Real  y = generate_canonical<Real,nbits>(u);

  size_t  k = upper_bound(c_.begin(), c_.end(), y) - c_.begin() - 1;
  return  b_[k] + (y - c_[k]) / d_[k];
}

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::piecewise_constant_distribution<Real>::
  piecewise_constant_distribution( )
: parm( )
{ }

template< class Real >
template< class InIterB, class InIterW >
  std::piecewise_constant_distribution<Real>::
piecewise_constant_distribution( InIterB b, InIterB e, InIterW w )
: parm( b, e, w )
{ }

template< class Real >
template< class UnaryOp >
  std::piecewise_constant_distribution<Real>::
  piecewise_constant_distribution( size_t nw, Real xmin, Real xmax, UnaryOp fw )
: parm( nw, xmin, xmax, fw )
{ }

template< class Real >
  std::piecewise_constant_distribution<Real>::
  piecewise_constant_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::piecewise_constant_distribution<Real>::
  reset( )
{ }

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::piecewise_constant_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::piecewise_constant_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::piecewise_constant_distribution<Real>::
  operator == ( piecewise_constant_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::piecewise_constant_distribution<Real>::
  operator != ( piecewise_constant_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>                 & os
                   , piecewise_constant_distribution<Real> const & d
                   )
{
  // b_ ... interval boundaries            [ 0 .. n_ ]
  // d_ ... probabilities a.k.a. densities [ 0 .. n_ )
  // c_ ... cumulative probabilities       [ 0 .. n_ ]

  typedef  piecewise_constant_distribution<Real>  dist_t;
  typedef  typename vector<Real>::const_iterator  iter_t;

  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  vector<Real> const & ints = d.intervals();

  os << ints.size();
  for( iter_t b  = ints.begin()
            , e  = ints.end(); b != e; ++b )
    os << sp << *b;

  vector<Real> const & dens = d.densities();
  for( iter_t b  = dens.begin()
            , e  = dens.end(); b != e; ++b )
    os << sp << *b;

  return os;
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits>            & is
                   , piecewise_constant_distribution<Real>  & d
                   )
{
  typedef  piecewise_constant_distribution<Real>  dist_t;
  typedef  typename dist_t::param_type            param_t;

  _::stream_state_guard<charT,traits> g(is);

  size_t n; is >> n;
  vector<Real> ints;  ints.reserve(n+1u);
  vector<Real> dens;  dens.reserve(n);

  copy_n(istream_iterator<Real>(is), n+1u, back_inserter(ints));
  copy_n(istream_iterator<Real>(is), n   , back_inserter(dens));
  if( ! is.fail() )
    d.param( param_t(ints.begin(), ints.end(), dens.begin()) );

  return is;
}

// ======================================================================

#endif  // DETAIL_PIECEWISE_CONSTANT_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
