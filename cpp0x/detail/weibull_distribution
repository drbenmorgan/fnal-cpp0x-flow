#ifndef DETAIL_WEIBULL_DISTRIBUTION
#define DETAIL_WEIBULL_DISTRIBUTION

// ======================================================================
//
// weibull_distribution: per C++11 26.5.8.4.4 [rand.dist.pois.weibull]
//
// Produce values x, 0 <= x
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stats"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class weibull_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>      &
                , weibull_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits> &
                , weibull_distribution<Real>  &
                );

}

// ======================================================================

template< class Real >
  class std::weibull_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::weibull_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            weibull_distribution( );
  explicit  weibull_distribution( Real );
            weibull_distribution( Real, Real );
  explicit  weibull_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  Real         a    ( ) const  { return parm.a(); }
  Real         b    ( ) const  { return parm.b(); }
  param_type   param( ) const  { return parm; }
  void         param( param_type const & p )  { parm = p; }
  result_type  min  ( ) const  { return Real(); }
  result_type  max  ( ) const  { return numeric_limits<Real>::infinity(); }

  // equality comparisons:
  bool  operator == ( weibull_distribution const & ) const;
  bool  operator != ( weibull_distribution const & ) const;

};  // weibull_distribution<>

// ======================================================================

template< class Real >
  class std::weibull_distribution<Real>::param_t
{
  friend  class weibull_distribution<Real>;

private:
  Real  a_;
  Real  b_;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error bad_a;
  static range_error bad_b;

public:

  // types:
  typedef  Real                        result_type;
  typedef  weibull_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = Real(1.0), Real = Real(1.0) );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  Real  a( ) const  { return a_; }
  Real  b( ) const  { return b_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

  // statistics:
  _::stats  expected( ) const;

};  // weibull_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::weibull_distribution<Real>::param_t::
  param_t( Real a, Real b )
: a_( Real() < a ? a : throw bad_a )
, b_( Real() < b  ? b  : throw bad_b )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::weibull_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return a_ == other.a_
      && b_ == other.b_;
}

template< class Real >
bool
  std::weibull_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// statistics:

template< class Real >
std::_::stats
  std::weibull_distribution<Real>::param_t::
  expected( ) const
{
  typedef  long double  ldbl;
  ldbl const  a         = a_
           ,  b         = b_
           ,  b2        = b * b
           ,  b3        = b * b2
           ,  b4        = b * b3
           ,  mean      = b * tgamma(1.0L + 1.0L / a)
           ,  mean2     = mean * mean
           ,  mean3     = mean * mean2
           ,  mean4     = mean * mean3
           ,  variance  = b2 * tgamma(1.0L + 2.0L / a) - mean2
           ,  variance2 = variance * variance
           ,  skew      = ( b3 * tgamma(1.0L + 3.0L / a)
                          - 3.0L * mean * variance - mean3
                          ) / (sqrt(variance) * variance)
           ,  kurtosis  = ( b4 * tgamma(1.0L + 4.0L / a)
                          - 4.0L * skew * variance * sqrt(variance) * mean
                          - 6.0L * mean2 * variance - mean4
                          ) / variance2 - 3.0L;
  return _::stats(mean, variance, skew, kurtosis);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::weibull_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  constexpr size_t  nbits = numeric_limits<result_type>::digits;
  constexpr Real    one(1.0);

  return b_ * pow( - log(one - generate_canonical<result_type,nbits>(u))
                 , one / a_
                 );

}  // generate()

template< class Real >
std::range_error
  std::weibull_distribution<Real>::param_t::
  bad_a("std::weibull_distribution<> requires 0 < a");

template< class Real >
std::range_error
  std::weibull_distribution<Real>::param_t::
  bad_b("std::weibull_distribution<> requires 0 < b");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::weibull_distribution<Real>::
  weibull_distribution( )
: parm( )
{ }

template< class Real >
  std::weibull_distribution<Real>::
  weibull_distribution( Real a )
: parm( a )
{ }

template< class Real >
  std::weibull_distribution<Real>::
  weibull_distribution( Real a, Real b )
: parm( a, b )
{ }

template< class Real >
  std::weibull_distribution<Real>::
  weibull_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::weibull_distribution<Real>::
  reset( )
{ }

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::weibull_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::weibull_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::weibull_distribution<Real>::
  operator == ( weibull_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::weibull_distribution<Real>::
  operator != ( weibull_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>      & os
                   , weibull_distribution<Real> const & d
                   )
{
  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  return os << d.a() << sp << d.b();
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits> & is
                   , weibull_distribution<Real>  & d
                   )
{
  typedef  weibull_distribution<Real>    dist_t;
  typedef  typename dist_t::result_type  result_t;
  typedef  typename dist_t::param_type   param_t;

  _::stream_state_guard<charT,traits> g(is);

  double a, b;
  is >> a >> b;
  if( ! is.fail() )
    d.param( param_t(a, b) );

  return is;
}

// ======================================================================

#endif  // DETAIL_WEIBULL_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
