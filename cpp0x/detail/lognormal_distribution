#ifndef DETAIL_LOGNORMAL_DISTRIBUTION
#define DETAIL_LOGNORMAL_DISTRIBUTION

// ======================================================================
//
// lognormal_distribution: per C++11 26.5.8.5.2 [rand.dist.norm.lognormal]
//
// Produce random numbers x, 0 < x
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/normal_distribution"
#include "cpp0x/detail/stats"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <sstream>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class lognormal_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>        &
                , lognormal_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits>  &
                , lognormal_distribution<Real> &
                );

}

// ======================================================================

template< class Real >
  class std::lognormal_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::lognormal_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            lognormal_distribution( );
  explicit  lognormal_distribution( Real );
            lognormal_distribution( Real, Real );
  explicit  lognormal_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  Real         m    ( ) const  { return parm.m(); }
  Real         s    ( ) const  { return parm.s(); }
  param_type   param( ) const  { return parm; }
  void         param( param_type const & p )  { parm = p; }
  result_type  min  ( ) const  { return numeric_limits<Real>::min(); }
  result_type  max  ( ) const  { return numeric_limits<Real>::infinity(); }

  // equality comparisons:
  bool  operator == ( lognormal_distribution const & ) const;
  bool  operator != ( lognormal_distribution const & ) const;

};  // lognormal_distribution<>

// ======================================================================

template< class Real >
  class std::lognormal_distribution<Real>::param_t
{
  friend  class lognormal_distribution<Real>;

private:
  Real  m_;
  Real  s_;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error bad_s;

public:

  // types:
  typedef  Real                          result_type;
  typedef  lognormal_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = Real(), Real = Real(1.0) );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  result_type  m( ) const  { return m_; }
  result_type  s( ) const  { return s_; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

  // statistics:
  _::stats  expected( ) const;

};  // lognormal_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::lognormal_distribution<Real>::param_t::
  param_t( Real m, Real s )
: m_( m )
, s_( Real() < s ? s : throw bad_s )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::lognormal_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return m_ == other.m_
      && s_ == other.s_;
}

template< class Real >
bool
  std::lognormal_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// statistics:

template< class Real >
std::_::stats
  std::lognormal_distribution<Real>::param_t::
  expected( ) const
{
  typedef  long double  ldbl;
  ldbl const  m        = m_
           ,  s        = s_
           ,  s2       = s * s
           ,  exp_s2   = exp(s2)
           ,  mean     = exp(m + s2 / 2.0L)
           ,  variance = (exp_s2 - 1.0L) * exp(2 * m + s2)
           ,  skew     = (exp_s2 + 2.0L) * sqrt((exp_s2 - 1.0L))
           ,  kurtosis =        exp(4.0L * s2)
                       + 2.0L * exp(3.0L * s2)
                       + 3.0L * exp(2.0L * s2)
                       - 6.0L;
  return _::stats(mean, variance, skew, kurtosis);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::lognormal_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  normal_distribution<result_type> norm_d(m_, s_);
  return exp( norm_d(u) );
}

template< class Real >
std::range_error
  std::lognormal_distribution<Real>::param_t::
  bad_s("std::lognormal_distribution<> requires 0 < s");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::lognormal_distribution<Real>::
  lognormal_distribution( )
: parm( )
{ }

template< class Real >
  std::lognormal_distribution<Real>::
  lognormal_distribution( Real m )
: parm( m )
{ }

template< class Real >
  std::lognormal_distribution<Real>::
  lognormal_distribution( Real m, Real s )
: parm( m, s )
{ }

template< class Real >
  std::lognormal_distribution<Real>::
  lognormal_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::lognormal_distribution<Real>::
  reset( )
{
}

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::lognormal_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::lognormal_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::lognormal_distribution<Real>::
  operator == ( lognormal_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::lognormal_distribution<Real>::
  operator != ( lognormal_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>        & os
                   , lognormal_distribution<Real> const & d
                   )
{
  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  return os << d.m() << sp << d.s();
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits>  & is
                   , lognormal_distribution<Real> & d
                   )
{
  typedef  lognormal_distribution<Real>  dist_t;
  typedef  typename dist_t::result_type  result_t;
  typedef  typename dist_t::param_type   param_t;

  _::stream_state_guard<charT,traits> g(is);

  result_t  m, s;
  is >> m >> s;
  if( ! is.fail() )
    d.param( param_t(m, s) );

  return is;
}

// ======================================================================

#endif  // DETAIL_LOGNORMAL_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
