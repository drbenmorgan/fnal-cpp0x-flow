#ifndef DETAIL_UNIFORM_REAL_DISTRIBUTION
#define DETAIL_UNIFORM_REAL_DISTRIBUTION

// ======================================================================
//
// uniform_real_distribution: per C++11 26.5.8.2.2 [rand.dist.uni.real]
//
// Produce random numbers x, a <= x < b
//
// ======================================================================

#include "cpp0x/cmath"
#include "cpp0x/detail/generate_canonical"
#include "cpp0x/detail/stats"
#include "cpp0x/detail/stream_state_guard"
#include "cpp0x/type_traits"
#include <iosfwd>
#include <limits>
#include <stdexcept>

namespace std {

  template< class Real = double >
    class uniform_real_distribution;

  template< class Real, class charT, class traits >
  basic_ostream<charT,traits> &
    operator << ( basic_ostream<charT,traits>           &
                , uniform_real_distribution<Real> const &
                );

  template< class Real, class charT, class traits >
  basic_istream<charT,traits> &
    operator >> ( basic_istream<charT,traits>     &
                , uniform_real_distribution<Real> &
                );

}

// ======================================================================

template< class Real >
  class std::uniform_real_distribution
{
private:

  // validate parameters:
  STATIC_ASSERT( is_floating_point<Real>::value
               , "std::uniform_real_distribution<> requires a floating-point type"
               );

  class param_t;

  param_t  parm;

public:

  // types:
  typedef  Real     result_type;
  typedef  param_t  param_type;

  // constructors and reset functions:
            uniform_real_distribution( );
  explicit  uniform_real_distribution( Real );
            uniform_real_distribution( Real, Real );
  explicit  uniform_real_distribution( param_type const & );
  void      reset( );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // generating functions:
  template< class URNG >
    result_type  operator () ( URNG & );
  template< class URNG >
    result_type  operator () ( URNG &, param_type const & );

  // property functions:
  result_type  a    ( ) const  { return parm.a(); }
  result_type  b    ( ) const  { return parm.b(); }
  param_type   param( ) const  { return parm; }
  void         param( param_type const & p )  { parm = p; }
  result_type  min  ( ) const  { return a(); }
  result_type  max  ( ) const  { return b(); }

  // equality comparisons:
  bool  operator == ( uniform_real_distribution const & ) const;
  bool  operator != ( uniform_real_distribution const & ) const;

};  // uniform_real_distribution<>

// ======================================================================

template< class Real >
  class std::uniform_real_distribution<Real>::param_t
{
  friend  class uniform_real_distribution<Real>;

private:
  Real  a_;
  Real  b_minus_a;

  // helper functions:
  template< class URNG >
    Real  generate( URNG & ) const;
  static range_error bad_range;
  static range_error infinite_range;

public:

  // types:
  typedef  Real                             result_type;
  typedef  uniform_real_distribution<Real>  distribution_type;

  // constructors:
  explicit  param_t( Real = 0.0, Real = 1.0 );

  // use compiler-generated copy c'tor, copy assignment, and d'tor

  // property functions:
  result_type  a( ) const  { return a_; }
  result_type  b( ) const  { return a_ + b_minus_a; }

  // equality comparisons:
  bool  operator == ( param_t const & ) const;
  bool  operator != ( param_t const & ) const;

  // statistics:
  _::stats  expected( ) const;

};  // uniform_real_distribution<>::param_t

// ======================================================================

// ----------------------------------------------------------------------
// constructors:

template< class Real >
  std::uniform_real_distribution<Real>::param_t::
  param_t( Real a, Real b )
: a_( a <= b ? a : throw bad_range )
, b_minus_a( isinf(b-a) ? throw infinite_range : b-a )
{ }

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
bool
  std::uniform_real_distribution<Real>::param_t::
  operator == ( param_t const & other ) const
{
  return a_        == other.a_
      && b_minus_a == other.b_minus_a;
}

template< class Real >
bool
  std::uniform_real_distribution<Real>::param_t::
  operator != ( param_t const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// statistics:

template< class Real >
std::_::stats
  std::uniform_real_distribution<Real>::param_t::
  expected( ) const
{
  typedef  long double  ldbl;
  ldbl const  a        = a_
           ,  b        = b_minus_a + a
           ,  range    = b_minus_a
           ,  range2   = range * range
           ,  mean     = (a + b) / 2.0L
           ,  variance = range2 / 12.0L
           ,  skew     = 0.0L
           ,  kurtosis = -6.0L / 5.0L;
  return _::stats(mean, variance, skew, kurtosis);
}

// ----------------------------------------------------------------------
// helper functions:

template< class Real >
template< class URNG >
Real
  std::uniform_real_distribution<Real>::param_t::
  generate( URNG & u ) const
{
  constexpr size_t  nbits = numeric_limits<double>::digits;
  return a_ + b_minus_a * generate_canonical<double,nbits>(u);
}


template< class Real >
std::range_error
  std::uniform_real_distribution<Real>::param_t::
  bad_range("std::uniform_real_distribution<> requires a <= b");

template< class Real >
std::range_error
  std::uniform_real_distribution<Real>::param_t::
  infinite_range("std::uniform_real_distribution<> requires b-a be finite");

// ======================================================================

// ----------------------------------------------------------------------
// constructors and reset functions:

template< class Real >
  std::uniform_real_distribution<Real>::
  uniform_real_distribution( )
: parm( )
{ }

template< class Real >
  std::uniform_real_distribution<Real>::
  uniform_real_distribution( Real a )
: parm( a )
{ }

template< class Real >
  std::uniform_real_distribution<Real>::
  uniform_real_distribution( Real a, Real b )
: parm( a, b )
{ }

template< class Real >
  std::uniform_real_distribution<Real>::
  uniform_real_distribution( param_type const & p )
: parm( p )
{ }

template< class Real >
void
  std::uniform_real_distribution<Real>::
  reset( )
{ }

// ----------------------------------------------------------------------
// generating functions:

template< class Real >
template< class URNG >
inline  Real
  std::uniform_real_distribution<Real>::
  operator () ( URNG & u )
{
  return parm.generate(u);
}

template< class Real >
template< class URNG >
inline  Real
  std::uniform_real_distribution<Real>::
  operator () ( URNG & u, param_type const & parm )
{
  return parm.generate(u);
}

// ----------------------------------------------------------------------
// equality comparisons:

template< class Real >
inline  bool
  std::uniform_real_distribution<Real>::
  operator == ( uniform_real_distribution const & other ) const
{
  return parm == other.parm;
}

template< class Real >
bool
  std::uniform_real_distribution<Real>::
  operator != ( uniform_real_distribution const & other ) const
{
  return ! (*this == other);
}

// ----------------------------------------------------------------------
// i/o functions:

template< class Real, class charT, class traits >
std::basic_ostream<charT,traits> &
  std::operator << ( basic_ostream<charT,traits>           & os
                   , uniform_real_distribution<Real> const & d
                   )
{
  _::stream_state_guard<charT,traits> g(os);
  constexpr charT  sp = os.widen(' ');

  return os << d.a() << sp << d.b();
}

template< class Real, class charT, class traits >
std::basic_istream<charT,traits> &
  std::operator >> ( basic_istream<charT,traits>     & is
                   , uniform_real_distribution<Real> & d
                   )
{
  typedef  uniform_real_distribution<Real>  dist_t;
  typedef  typename dist_t::result_type     result_t;
  typedef  typename dist_t::param_type      param_t;

  _::stream_state_guard<charT,traits> g(is);

  result_t  a, b;
  is >> a >> b;
  if( ! is.fail() )
    d.param( param_t(a, b) );

  return is;
}

// ======================================================================

#endif  // DETAIL_UNIFORM_REAL_DISTRIBUTION

// vi: set filetype=cpp:expandtab:shiftwidth=2:
