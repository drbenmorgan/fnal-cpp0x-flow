#ifndef CPP0X_DETAIL_UNIQUE_PTR
#define CPP0X_DETAIL_UNIQUE_PTR

// ======================================================================
//
// unique_ptr.hpp header file
//
// Copyright 2009 Howard Hinnant, Ion Gazta√±aga.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
// See http://www.boost.org/libs/foreach for documentation

// This is a C++03 emulation of std::unique_ptr placed in namespace boost.
// See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2800.pdf
//   for the latest unique_ptr specification, and
//   reference http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html
//   for any pending issues against this specification.
//
// 2010-07-25: reformatted; some namespaces renamed
//
// ======================================================================

#include <boost/mpl/if.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost
{

namespace u_ptr
{

typedef  char  one;
struct two { one _[2]; };

// ----------------------------------------------------------------------
// An is_convertible<From, To> that considers From an rvalue (consistent
// with C++0X).  This simplified version neglects function, array, void
// and abstract types.  I had to make a special case out of
// is_convertible<T,T> to make move-only types happy.
// ----------------------------------------------------------------------

namespace is_conv_imp
{
  template <class T> one test1(const T&);
  template <class T> two test1(...);
  template <class T> one test2(T);
  template <class T> two test2(...);
  template <class T> T declval();
}

template <class T1, class T2>
struct is_convertible
{
  static  bool const  value
    = sizeof(is_conv_imp::test1<T2>(is_conv_imp::declval<T1>())) == 1;
};

template <class T>
struct is_convertible<T, T>
{
  static  bool const  value
    = sizeof(is_conv_imp::test2<T>(is_conv_imp::declval<T>())) == 1;
};

// ----------------------------------------------------------------------
// rv<T> mimics C++0X T&&
// ----------------------------------------------------------------------

template <class T>
class rv
{
  T& r_;

public:
  explicit rv(T& r) : r_(r) {}
  T* operator->() {return &r_;}
  T& operator*() {return r_;}
};

// ----------------------------------------------------------------------
// identity<T>::type is used where type deduction is not wanted
// ----------------------------------------------------------------------

template <class T>
struct identity
{
  typedef T type;
};

}  // u_ptr

// ----------------------------------------------------------------------
// move() mimics C++0X std::move()
// ----------------------------------------------------------------------

template <class T>
inline
typename enable_if_c< ! u_ptr::is_convertible< T
                                              , u_ptr::rv<T>
                                              >::value
                    , T&
                    >::type
move(T& t)
{
  return t;
}

template <class T>
inline
typename enable_if_c< ! u_ptr::is_convertible< T
                                              , u_ptr::rv<T>
                                              >::value
                    , const T&
                    >::type
move(const T& t)
{
  return t;
}

template <class T>
inline
typename enable_if_c< u_ptr::is_convertible< T
                                                       , u_ptr::rv<T>
                                                       >::value
                    , T
                    >::type
move(T& t)
{
  return T(u_ptr::rv<T>(t));
}

// ----------------------------------------------------------------------
// forward() mimics C++0X std::forward()
// ----------------------------------------------------------------------

template <class T>
inline
typename enable_if_c
<
  is_reference<T>::value,
  T
>::type
forward(typename u_ptr::identity<T>::type t)
{
  return t;
}

template <class T>
inline
typename enable_if_c
<
  !is_reference<T>::value,
  T
>::type
forward(typename u_ptr::identity<T>::type& t)
{
  return move(t);
}

template <class T>
inline
typename enable_if_c
<
  !is_reference<T>::value,
  T
>::type
forward(const typename u_ptr::identity<T>::type& t)
{
  return move(const_cast<T&>(t));
}

namespace u_ptr {

// A move-aware but stripped-down compressed_pair which only optimizes storage for T2
template <class T1, class T2, bool = is_empty<T2>::value>
class unique_ptr_storage
{
  T1 t1_;
  T2 t2_;

  typedef typename add_reference<T2>::type T2_reference;
  typedef typename add_reference<const T2>::type T2_const_reference;

  unique_ptr_storage(const unique_ptr_storage&);
  unique_ptr_storage& operator=(const unique_ptr_storage&);
public:
  operator rv<unique_ptr_storage>() {return rv<unique_ptr_storage>(*this);}

  unique_ptr_storage() : t1_(), t2_() {}

  explicit unique_ptr_storage(T1 t1)
      : t1_(move(t1)), t2_() {}

  unique_ptr_storage(T1 t1, T2 t2)
      : t1_(move(t1)), t2_(forward<T2>(t2)) {}

        T1& first()       {return t1_;}
  const T1& first() const {return t1_;}

        T2_reference second()       {return t2_;}
  T2_const_reference second() const {return t2_;}
};

template <class T1, class T2>
class unique_ptr_storage<T1, T2, true>
  : private T2
{
  T1 t1_;
  typedef T2 t2_;

  unique_ptr_storage(const unique_ptr_storage&);
  unique_ptr_storage& operator=(const unique_ptr_storage&);
public:
  operator rv<unique_ptr_storage>() {return rv<unique_ptr_storage>(*this);}

  unique_ptr_storage() : t1_() {}

  explicit unique_ptr_storage(T1 t1)
      : t1_(move(t1)) {}

  unique_ptr_storage(T1 t1, T2 t2)
      : t2_(move(t2)), t1_(move(t1)) {}

        T1& first()       {return t1_;}
  const T1& first() const {return t1_;}

        T2& second()       {return *this;}
  const T2& second() const {return *this;}
};

template <class T1, class T2, bool b>
inline
void
swap(unique_ptr_storage<T1, T2, b>& x, unique_ptr_storage<T1, T2, b>& y)
{
  using std::swap;
  swap(x.first(), y.first());
  swap(x.second(), y.second());
}

}  // u_ptr

template <class T>
struct default_delete
{
  default_delete() {}
  template <class U>
      default_delete(const default_delete<U>&,
          typename enable_if_c<u_ptr::is_convertible<U*, T*>::value>::type* = 0)
      {}

  void operator()(T* ptr) const
  {
      BOOST_STATIC_ASSERT(sizeof(T) > 0);
      delete ptr;
  }
};

template <class T>
struct default_delete<T[]>
{
  void operator()(T* ptr) const
  {
      BOOST_STATIC_ASSERT(sizeof(T) > 0);
      delete [] ptr;
  }

private:

  template <class U> void operator()(U*) const;
};

namespace u_ptr
{

namespace ptr_type_imp
{

template <class U> static two test(...);
template <class U> static one test(typename U::pointer* = 0);

}  // ptr_type_imp

template <class T>
struct has_ptr_type_mbr
{
  static  bool const  value = sizeof(ptr_type_imp::test<T>(0)) == 1;
};

namespace ptr_type_imp
{

template <class T, class D, bool = has_ptr_type_mbr<D>::value>
struct ptr_type
{
  typedef typename D::pointer type;
};

template <class T, class D>
struct ptr_type<T, D, false>
{
  typedef T* type;
};

}  // ptr_type_imp

template <class T, class D>
struct ptr_type
{
  typedef typename ptr_type_imp::ptr_type< T
                                                 , typename boost::remove_reference<D>::type
                                                 >::type
          type;
};

}  // u_ptr


// ----------------------------------------------------------------------


template <class T, class D = default_delete<T> >
class unique_ptr
{
public:
  typedef T element_type;
  typedef D deleter_type;
  typedef typename u_ptr::ptr_type< element_type
                                                  , deleter_type
                                                  >::type
          pointer;

private:
  u_ptr::unique_ptr_storage<pointer, deleter_type> ptr_;

  typedef typename add_reference<deleter_type>::type deleter_reference;
  typedef typename add_reference<const deleter_type>::type deleter_const_reference;

  struct nat {int for_bool_;};

  unique_ptr(unique_ptr&);
  unique_ptr& operator=(unique_ptr&);

public:
  operator u_ptr::rv<unique_ptr>()
  {return u_ptr::rv<unique_ptr>(*this);}

  unique_ptr(u_ptr::rv<unique_ptr> r)
  : ptr_(r->release(), forward<deleter_type>(r->get_deleter()))
  {}

  unique_ptr& operator=(u_ptr::rv<unique_ptr> r)
  {
    reset(r->release());
    ptr_.second() = move(r->get_deleter());
    return *this;
  }

  unique_ptr()
  {
    BOOST_STATIC_ASSERT(!is_reference<deleter_type>::value);
    BOOST_STATIC_ASSERT(!is_pointer<deleter_type>::value);
  }

  explicit unique_ptr(pointer p)
    : ptr_(p)
  {
    BOOST_STATIC_ASSERT(!is_reference<deleter_type>::value);
    BOOST_STATIC_ASSERT(!is_pointer<deleter_type>::value);
  }

  unique_ptr( pointer p
            , typename mpl::if_< is_reference<D>
                               , volatile typename remove_reference<D>::type &
                               , D
                               >::type d
            )
    : ptr_( move(p)
          , forward<D>(const_cast<typename add_reference<D>::type>(d))
          )
  {}

  template <class U, class E>
      unique_ptr(unique_ptr<U, E> u,
          typename enable_if_c
              <
              !boost::is_array<U>::value &&
              u_ptr::is_convertible<typename unique_ptr<U>::pointer, pointer>::value &&
              u_ptr::is_convertible<E, deleter_type>::value &&
              (
                  !is_reference<deleter_type>::value ||
                   is_same<deleter_type, E>::value
              )
              >::type* = 0)
          : ptr_(u.release(), forward<D>(forward<E>(u.get_deleter()))) {}

  ~unique_ptr() {reset();}

  unique_ptr& operator=(int nat::*)
  {
      reset();
      return *this;
  }

  template <class U, class E>
    unique_ptr&
    operator=(unique_ptr<U, E> u)
    {
      reset(u.release());
      ptr_.second() = move(u.get_deleter());
      return *this;
    }

  typename add_reference<T>::type operator*() const {return *get();}
  pointer operator -> () const {return get();}
  pointer get() const {return ptr_.first();}
  deleter_reference       get_deleter()       {return ptr_.second();}
  deleter_const_reference get_deleter() const {return ptr_.second();}
  operator int nat::* () const {return get() ? &nat::for_bool_ : 0;}

  void reset(pointer p = pointer())
  {
      pointer t = get();
      if (t != pointer())
          get_deleter()(t);
      ptr_.first() = p;
  }

  pointer release()
  {
      pointer tmp = get();
      ptr_.first() = pointer();
      return tmp;
  }

  void swap(unique_ptr& u) {u_ptr::swap(ptr_, u.ptr_);}
};  // unique_ptr<>


// ----------------------------------------------------------------------


template <class T, class D>
class unique_ptr<T[], D>
{
public:
  typedef T element_type;
  typedef D deleter_type;
  typedef typename u_ptr::ptr_type<element_type, deleter_type>::type pointer;

private:
  u_ptr::unique_ptr_storage<pointer, deleter_type> ptr_;

  typedef typename add_reference<deleter_type>::type deleter_reference;
  typedef typename add_reference<const deleter_type>::type deleter_const_reference;

  struct nat {int for_bool_;};

  unique_ptr(unique_ptr&);
  unique_ptr& operator=(unique_ptr&);

public:
  operator u_ptr::rv<unique_ptr>() {return u_ptr::rv<unique_ptr>(*this);}
  unique_ptr(u_ptr::rv<unique_ptr> r) : ptr_(r->release(), forward<deleter_type>(r->get_deleter())) {}
  unique_ptr& operator=(u_ptr::rv<unique_ptr> r)
  {
      reset(r->release());
      ptr_.second() = move(r->get_deleter());
      return *this;
  }

  unique_ptr()
      {
          BOOST_STATIC_ASSERT(!is_reference<deleter_type>::value);
          BOOST_STATIC_ASSERT(!is_pointer<deleter_type>::value);
      }

  explicit unique_ptr(pointer p)
      : ptr_(p)
      {
          BOOST_STATIC_ASSERT(!is_reference<deleter_type>::value);
          BOOST_STATIC_ASSERT(!is_pointer<deleter_type>::value);
      }

  unique_ptr(pointer p, typename mpl::if_<is_reference<D>,
                        volatile typename remove_reference<D>::type&, D>::type d)
      : ptr_(move(p), forward<D>(const_cast<typename add_reference<D>::type>(d))) {}

  ~unique_ptr() {reset();}

  T& operator[](size_t i) const {return get()[i];}
  pointer get() const {return ptr_.first();}
  deleter_reference       get_deleter()       {return ptr_.second();}
  deleter_const_reference get_deleter() const {return ptr_.second();}
  operator int nat::*() const {return get() ? &nat::for_bool_ : 0;}

  void reset(pointer p = pointer())
  {
      pointer t = get();
      if (t != pointer())
          get_deleter()(t);
      ptr_.first() = p;
  }

  pointer release()
  {
      pointer tmp = get();
      ptr_.first() = pointer();
      return tmp;
  }

  void swap(unique_ptr& u) {u_ptr::swap(ptr_, u.ptr_);}
private:
  template <class U>
      explicit unique_ptr(U,
          typename enable_if_c<u_ptr::is_convertible<U, pointer>::value>::type* = 0);

  template <class U>
      unique_ptr(U, typename mpl::if_<is_reference<D>,
                        volatile typename remove_reference<D>::type&, D>::type,
                        typename enable_if_c<u_ptr::is_convertible<U, pointer>::value>::type* = 0);
};

template<class T, class D>
inline
void
swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y)
{
  x.swap(y);
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return x.get() == y.get();
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return !(x == y);
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return x.get() < y.get();
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return !(y < x);
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return y < x;
}

template<class T1, class D1, class T2, class D2>
inline
bool
operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
{
  return !(x < y);
}

}  // boost

// ======================================================================

#endif

// vi: set filetype=cpp:expandtab:shiftwidth=2:
